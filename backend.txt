def sheet_Manual_Adjustments_Mn_LCY(ctx: Mapping[str, pd.DataFrame]) -> pd.DataFrame:
    """
    Build 'Manual_Adjustments(Mn LCY)' from user_input + derived rollup and years.

    Steps:
      1) entity from user_input['entity']
      2) cgu list from cgu_rollup (both LHS and RHS)
      3) years list from current_year/testing_date + look_ahead
      4) adj_list = ['RWA','PBT','Free_Cash_Flows','CET1']
      5) Output rows = cartesian product of CGUs x adj_list, with zeros for Opening and each year.
    """
    import itertools
    import pandas as pd
    from utility import ui_to_kv, parse_cgu_rollup, derive_years_from_ui_kv

    ui = ctx["user_input"]
    kv = ui_to_kv(ui)

    # 1) entity
    entity = str(kv.get("entity", "")).strip()

    # 2) cgu list from rollup
    rollup_expr = kv.get("cgu_rollup") or kv.get("cgu_rollups") or ""
    cgus = parse_cgu_rollup(rollup_expr)

    # 3) years
    years = derive_years_from_ui_kv(kv)  # list[int]

    # 4) adjustment types
    adj_list = ["RWA", "PBT", "Free_Cash_Flows", "CET1"]

    # 5) build cartesian product
    rows = []
    for cgu, adj in itertools.product(cgus, adj_list):
        row = {
            "entity": entity,
            "business_line": cgu,
            "adj_type": adj,
            "Opening": 0.0,
        }
        for y in years:
            row[y] = 0.0
        rows.append(row)

    # consistent column order: entity, business_line, adj_type, Opening, years...
    cols = ["entity", "business_line", "adj_type", "Opening"] + years
    df_out = pd.DataFrame(rows, columns=cols)
    return df_out
