def sheet_CET1_required(ctx: Mapping[str, pd.DataFrame]) -> pd.DataFrame:
    """
    Output sheet: "CET1_required"

    Inputs:
      - ctx["user_input"]: DataFrame from user_input/user_input (sheet "user_input")
        expected to have columns like ["Field", "Value"] (case-insensitive OK).

    Logic:
      1) Identify the 'Field' and 'Value' columns.
      2) start_year = 'current_year' if present; else parse year from 'testing_date' (MM/DD/YYYY).
      3) look_ahead = int(value of 'look_ahead')
      4) years = [start_year .. start_year + look_ahead - 1]
      5) cet1 = float(value of 'CET1_required (in decimal)')
      6) Output one row:
         {"entity": "5300_1GRT - HSBC Bank Middle East",
          "CET1 ratio": "Total",
          "Opening": cet1,
          2021: cet1, 2022: cet1, ...}
    """
    import re
    import pandas as pd

    ui = ctx["user_input"]

    # 1) Find columns (case-insensitive)
    cols_lower = {str(c).strip().lower(): c for c in ui.columns}
    field_col = cols_lower.get("field")
    value_col = cols_lower.get("value")
    if field_col is None or value_col is None:
        raise KeyError("user_input must contain 'Field' and 'Value' columns (case-insensitive).")

    # Build a key/value dict from the rows (strip keys)
    kv = {}
    for _, row in ui[[field_col, value_col]].iterrows():
        key = str(row[field_col]).strip()
        if key != "" and key.lower() != "nan":
            kv[key] = row[value_col]

    # 2) Determine start_year
    start_year = None
    if "current_year" in kv and str(kv["current_year"]).strip() != "":
        try:
            start_year = int(float(kv["current_year"]))
        except Exception:
            start_year = None
    if start_year is None:
        # fallback to testing_date (MM/DD/YYYY)
        td = str(kv.get("testing_date", "")).strip()
        m = re.search(r"(\d{1,2})/(\d{1,2})/(\d{4})", td)
        if not m:
            raise ValueError("Could not determine start year: 'current_year' missing and 'testing_date' not in MM/DD/YYYY.")
        start_year = int(m.group(3))

    # 3) look_ahead
    if "look_ahead" not in kv:
        raise KeyError("Missing 'look_ahead' in user_input.")
    try:
        look_ahead = int(float(kv["look_ahead"]))
    except Exception:
        raise ValueError(f"Invalid look_ahead value: {kv['look_ahead']}")

    # 4) years list
    years = list(range(start_year, start_year + look_ahead))

    # 5) CET1 value
    cet1_key = "CET1_required (in decimal)"
    if cet1_key not in kv:
        raise KeyError(f"Missing '{cet1_key}' in user_input.")
    def to_float(x):
        s = str(x).strip()
        if s.endswith("%"):
            try:
                return float(s[:-1]) / 100.0
            except Exception:
                return 0.0
        try:
            return float(s)
        except Exception:
            return 0.0
    cet1 = to_float(kv[cet1_key])

    # 6) Assemble output (constant entity per spec)
    entity_out = "5300_1GRT - HSBC Bank Middle East"
    data = {
        "entity": [entity_out],
        "CET1 ratio": ["Total"],
        "Opening": [cet1],
    }
    for y in years:
        data[y] = [cet1]

    # Ensure column order: entity, CET1 ratio, Opening, years ascending
    columns = ["entity", "CET1 ratio", "Opening"] + years
    return pd.DataFrame(data)[columns]
