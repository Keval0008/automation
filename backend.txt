# Find all candidate columns for this target year
def has_year(col: int, y: int) -> bool:
    col_vals = df_str.iloc[:, col].tolist()
    for txt in col_vals:
        yy = year_from_any(txt)
        if yy == y:
            return True
    return False

def matches_type_selector(col: int, typ: str) -> bool:
    col_vals = [str(v).strip() for v in df_str.iloc[:, col].tolist()]
    t = (typ or "").strip().lower()
    if t in ("forcasted", "actual"):  # mapper uses 'forcasted' spelling
        # exact 'Fcst'
        return any(v == "Fcst" for v in col_vals)
    elif t == "budgeted":
        # substring 'Budget' (case-insensitive)
        return any("budget" in v.lower() for v in col_vals)
    else:
        # default fallback: accept anything (we'll still filter by year)
        return True

# Choose column for this (cgu, year, typ)
candidates = [c for c in yr_cols if has_year(c, y)]
col_choice = None
# Prefer candidates that satisfy the type selector
prio = [c for c in candidates if matches_type_selector(c, typ)]
if prio:
    col_choice = prio[0]
elif candidates:
    col_choice = candidates[0]

if col_choice is not None:
    values[y][cgu] = to_float(df.iat[row_pbt, col_choice])
