def sheet_tangible_equity(ctx: Mapping[str, pd.DataFrame]) -> pd.DataFrame:
    """
    Builds the 'tangible_equity' sheet from:
      - ctx['tangible_equity'] -> sheet 'ROTE Detail Valued' (in 'tangible_equity' folder, key 'RoTE')
      - ctx['user_input'] -> sheet 'user_input'
    Logic:
      entity from user_input; CGUs from cgu_rollup; for each CGU find its 'Spot' TE column
      and take value on the entity row. Also computes global te_ratio.
    """
    import numpy as np
    import pandas as pd
    from utility import ui_to_kv, parse_cgu_rollup

    te_input_df = ctx["tangible_equity"]
    ui = ctx["user_input"]
    kv = ui_to_kv(ui)

    entity = str(kv.get("entity", "")).strip()
    rollup_expr = kv.get("cgu_rollup") or kv.get("cgu_rollups") or ""
    cgus = parse_cgu_rollup(rollup_expr)  # e.g. ['Total','CIB','IWPB','CC']

    # String view for matching
    te_str = te_input_df.copy().applymap(lambda x: str(x).strip() if pd.notna(x) else "")

    # --- find entity row anywhere in the sheet ---
    pos_entity = np.argwhere(te_str.values == entity)
    if pos_entity.size == 0:
        # case-insensitive fallback
        pos_entity = np.argwhere(np.vectorize(lambda x: x.lower() == entity.lower())(te_str.values))
    if pos_entity.size == 0:
        raise ValueError(f"Entity '{entity}' not found in tangible_equity sheet.")
    entity_row_idx = int(pos_entity[0][0])  # we only need the row index

    # Helper to find first occurrence of a label anywhere; returns (row, col)
    def find_label(label: str) -> tuple[int, int]:
        hits = np.argwhere(te_str.values == label)
        if hits.size:
            return int(hits[0][0]), int(hits[0][1])
        # case-insensitive fallback
        hits = np.argwhere(np.vectorize(lambda x: x.lower() == label.lower())(te_str.values))
        if hits.size:
            return int(hits[0][0]), int(hits[0][1])
        raise ValueError(f"Label '{label}' not found in tangible_equity sheet.")

    # Numeric parser that tolerates strings and percents
    def to_float(x) -> float:
        if pd.isna(x):
            return 0.0
        s = str(x).strip()
        if s == "":
            return 0.0
        if s.endswith("%"):
            try:
                return float(s[:-1]) / 100.0
            except Exception:
                return 0.0
        try:
            return float(s)
        except Exception:
            return 0.0

    output_dict = {"entity": entity}

    for cgu in cgus:
        cgu_new = "Corp Centre" if cgu == "CC" else cgu
        variable = "Spot TE" if cgu_new == "Total" else f"{cgu_new} TE Spot"
        _r, cgu_col_idx = find_label(variable)  # we only need the column index
        output_dict[cgu] = to_float(te_input_df.iat[entity_row_idx, cgu_col_idx])

    # Compute global te_ratio as requested
    total_val = output_dict.get("Total", 0.0) or 0.0
    global te_ratio  # noqa: PLW0603 â€“ explicit global per your spec
    te_ratio = {k: (v / total_val if total_val else 0.0)
                for k, v in output_dict.items()
                if k not in ("entity",)}

    return pd.DataFrame([output_dict], columns=["entity"] + cgus)
