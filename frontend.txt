import os
import tkinter as tk
from tkinter import filedialog, messagebox, ttk
from tkinter import StringVar
import threading

# Dummy function to simulate sheet processing
def run_population(sheet_funcs, output_callback, progress_callback, complete_callback):
    total = len(sheet_funcs)
    for i, (sheet_name, func) in enumerate(sheet_funcs.items(), 1):
        # simulate processing
        progress_callback(i, total, f"Populating {sheet_name}...")
        func()  # run actual function
    complete_callback()

class HBMEApp:
    def __init__(self, root, sheet_funcs):
        self.root = root
        self.root.title("HBME Input Automation")
        self.root.geometry("600x400")
        self.root.configure(bg="white")

        self.sheet_funcs = sheet_funcs
        self.input_folder = None
        self.output_file = None
        self.status_var = StringVar()
        self.folder_var = StringVar(value="Select Input Folder and Output Folder to begin")

        # Title
        tk.Label(root, text="HBME Input Automation", font=("Segoe UI", 16, "bold"), bg="white").pack(pady=15)

        # Input folder section
        tk.Label(root, text="Select Input Folder", font=("Segoe UI", 11), bg="white").pack()
        frame = tk.Frame(root, bg="white")
        frame.pack(pady=5)
        self.entry = tk.Entry(frame, textvariable=self.folder_var, width=50, state="readonly")
        self.entry.pack(side="left", padx=(0, 10))
        tk.Button(frame, text="Browse", bg="#f5c542", command=self.browse_folder).pack(side="left")

        # Status text
        self.status_label = tk.Label(root, textvariable=self.folder_var, font=("Segoe UI", 10), fg="gray", bg="white")
        self.status_label.pack(pady=(5, 10))

        # Run button
        tk.Button(root, text="Run Input Population", bg="#f5c542", font=("Segoe UI", 12, "bold"),
                  command=self.run_population_thread).pack(pady=10)

        # Progress bar + status
        self.progress = ttk.Progressbar(root, length=400, mode="determinate")
        self.progress.pack(pady=10)
        self.progress_label = tk.Label(root, text="", bg="white", font=("Segoe UI", 10))
        self.progress_label.pack()

        # Download button
        self.download_btn = tk.Button(root, text="Download Input Template", bg="#f5c542",
                                      command=self.download_template, state="disabled")
        self.download_btn.pack(pady=10)

        # Output path display
        self.output_label = tk.Label(root, text="", bg="white", font=("Segoe UI", 9, "italic"))
        self.output_label.pack(pady=(5, 0))

    def browse_folder(self):
        folder = filedialog.askdirectory()
        if folder:
            self.input_folder = folder
            self.folder_var.set(folder)

    def run_population_thread(self):
        if not self.input_folder:
            messagebox.showwarning("Warning", "Please select an input folder first.")
            return

        self.progress["value"] = 0
        self.progress_label.config(text="Starting population...")
        thread = threading.Thread(target=run_population,
                                  args=(self.sheet_funcs, self.save_output,
                                        self.update_progress, self.population_complete))
        thread.start()

    def update_progress(self, current, total, status):
        percent = int((current / total) * 100)
        self.progress["value"] = percent
        self.progress_label.config(text=f"{status} ({percent}%)")
        self.root.update_idletasks()

    def save_output(self, suggested_name="HBME_input_template.xlsx"):
        file_path = filedialog.asksaveasfilename(defaultextension=".xlsx",
                                                 initialfile=suggested_name,
                                                 filetypes=[("Excel files", "*.xlsx")])
        if file_path:
            self.output_file = file_path
            # Save Excel here
            # workbook.save(file_path)
            self.output_label.config(text=f"Output saved at: {file_path}")
            self.download_btn["state"] = "normal"

    def population_complete(self):
        messagebox.showinfo("Completed", "Input Population completed successfully!")
        if not self.output_file:
            self.save_output()

    def download_template(self):
        if self.output_file:
            os.startfile(self.output_file)  # re-open saved file


if __name__ == "__main__":
    # Example dummy dict
    sheet_funcs = {
        "Sheet1": lambda: None,
        "Sheet2": lambda: None,
        "Sheet3": lambda: None
    }

    root = tk.Tk()
    app = HBMEApp(root, sheet_funcs)
    root.mainloop()
